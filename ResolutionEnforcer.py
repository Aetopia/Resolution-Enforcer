# Windows
from psutil import Process
from win32gui import GetWindowText, GetForegroundWindow
from win32process import GetWindowThreadProcessId
from win32api import ChangeDisplaySettings
from win32con import DM_PELSWIDTH, DM_PELSHEIGHT
from pywintypes import DEVMODEType

# Python
from time import sleep
from configparser import ConfigParser
from os import path, _exit, startfile, chdir
from sys import argv
# Options


class options:
    def get():
        config = ConfigParser()
        config.read('Options.ini')
        return config

    def exist():
        if path.exists('Options.ini') is False:
            with open('Options.ini', 'w') as f:
                f.write('''; Configuration file generated by Resolution Enforcer.

[General]
; Set the delay between application checks in seconds.
; Increase this value if you experience high CPU usage.
Delay = 0.1  

[Applications]
; Title or Executable Name = Resolution
; Example.exe = 0x0''')
            startfile('Options.ini', 'open')
            _exit(0)

# Get the title and executable name from an active window.


def get_window():
    hwnd = GetForegroundWindow()
    title = GetWindowText(hwnd).lower()
    executable = path.split(path.abspath(
        Process(GetWindowThreadProcessId(hwnd)[1]).exe()))[1].lower()
    return (title, executable)

# Filter out applications to enforce resolutions on.


def enforce_resolution():
    enforce = False
    while True:
        try:
            config = options.get()
            sleep(float(config['General']['Delay']))
            title, executable = get_window()
            print(title, executable)

            if executable == 'applicationframehost.exe':
                if title in config['Applications']:
                    if enforce is False:
                        resolution = config['Applications'][str(title)]
                        enforce = True

            elif executable in config['Applications']:
                if enforce is False:
                    resolution = config['Applications'][str(executable)]
                    enforce = True

            else:
                resolution = '0x0'

            width, height = resolution.split('x')
            width, height = int(width.strip()), int(height.strip())
            resolution = DEVMODEType()
            resolution.PelsWidth, resolution.PelsHeight = width, height
            resolution.Fields = DM_PELSWIDTH | DM_PELSHEIGHT

            if enforce:
                ChangeDisplaySettings(resolution, 0)
                break
        except KeyboardInterrupt:
            _exit(1)
        except:
            pass
    restore_resolution()

# Restore the default desktop resolution.


def restore_resolution():
    restore = False
    while True:
        try:
            config = options.get()
            sleep(float(config['General']['Delay']))
            title, executable = get_window()

            if executable == 'applicationframehost.exe':
                if title not in config['Applications']:
                    restore = True

            elif executable not in config['Applications']:
                restore = True

            if restore:
                ChangeDisplaySettings(None, 0)
                break
        except KeyboardInterrupt:
            _exit(1)
        except:
            pass
    enforce_resolution()


def main():
    chdir(path.dirname(argv[0]))
    print('''┌───────────────────┐ 
│Resolution Enforcer│
└───────────────────┘''')
    options.exist()
    enforce_resolution()


if __name__ == '__main__':
    main()
