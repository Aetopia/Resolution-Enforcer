
from configparser import ConfigParser
from os import _exit, chdir, path, startfile
from sys import argv
from time import sleep, time
from traceback import format_exc

import psutil
from pywintypes import DEVMODEType
from win32api import ChangeDisplaySettings
from win32con import DM_PELSHEIGHT, DM_PELSWIDTH
from win32gui import GetForegroundWindow, GetWindowText
from win32process import GetWindowThreadProcessId


class options:
    def get():
        config = ConfigParser()
        config.read('Options.ini')
        return config

    def exist():
        if path.exists('Options.ini') is False:
            with open('Options.ini', 'w') as f:
                f.write('''; Configuration file generated by Resolution Enforcer.

[General]
; Set the delay between application checks in milliseconds.
; Increase this value if you experience high CPU usage.
Delay = 100 

[Applications]
; Title or Executable Name = Resolution
; Example.exe = 0x0''')
            startfile('Options.ini', 'open')
            _exit(0)

# Get the title and executable name from an active window.


def get_window():
    hwnd = GetForegroundWindow()
    title = GetWindowText(hwnd).lower()
    pid = GetWindowThreadProcessId(hwnd)[1]
    executable = path.split(psutil.Process(pid).exe())[1].lower()
    return (title, executable)

# Filter out applications to enforce resolutions on.


def enforce_resolution():
    enforce = False
    while True:
        try:
            config = options.get()
            sleep(float(config['General']['Delay'])*(1/1000))
            title, executable = get_window()

            if executable == 'applicationframehost.exe':
                if title in config['Applications']:
                    if enforce is False:
                        resolution = config['Applications'][str(title)]
                        enforce = True

            elif executable in config['Applications']:
                if enforce is False:
                    resolution = config['Applications'][str(executable)]
                    enforce = True

            if enforce:
                width, height = resolution.split('x')
                width, height = int(width.strip()), int(height.strip())
                resolution = DEVMODEType()
                resolution.PelsWidth, resolution.PelsHeight = width, height
                resolution.Fields = DM_PELSWIDTH | DM_PELSHEIGHT
                ChangeDisplaySettings(resolution, 0)
                break

        except psutil.NoSuchProcess:
            pass
        except KeyboardInterrupt:
            _exit(1)
        except:
            log('Enforce Resolution')
            pass

    restore_resolution()

# Restore the default desktop resolution.


def restore_resolution():
    restore = False
    while True:
        try:
            config = options.get()
            sleep(float(config['General']['Delay'])*(1/1000))
            title, executable = get_window()

            if executable == 'applicationframehost.exe':
                if title not in config['Applications']:
                    restore = True

            elif executable not in config['Applications']:
                restore = True

            if restore:
                ChangeDisplaySettings(None, 0)
                break
            
        except psutil.NoSuchProcess:
            pass
        except KeyboardInterrupt:
            _exit(1)
        except:
            log('Restore Resolution')
            pass

    enforce_resolution()


def log(func:str):
    with open('Error.log', 'a') as f:
        f.write(f'{func} > {format_exc().splitlines()[-1]}\n')


def main():
    chdir(path.dirname(argv[0]))
    with open('Error.log', 'w') as f:
        f.write('')
    print('''┌───────────────────┐ 
│Resolution Enforcer│
└───────────────────┘''')
    options.exist()
    enforce_resolution()


if __name__ == '__main__':
    main()
